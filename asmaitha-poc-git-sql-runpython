pipeline {
    agent {label 'linux'}

    stages {
        stage('git clone to db instance') {
            steps {
                sshPublisher(publishers: [sshPublisherDesc(configName: 'demo-rds', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '''rm -r poc-1;
rm -f data_generator.py;
rm -f data_generator.py;
rm -f data_generator.py;
git clone https://github.com/kishore18111997/poc-1;
mv /home/ubuntu/poc-1/* ~/''', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true)])
            }
        }
        stage('publish sql commands in Db instance') {
            steps {
                sshPublisher(publishers: [sshPublisherDesc(configName: 'demo-rds', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: 'mysql -h demo-rds.cdy31g9xvrr1.ap-south-1.rds.amazonaws.com -u admin -p123456789 -P 3306 -e "use poc;" -e " select * from maintable where username = \'hitesh\'; "', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true)])
            }
        }
        stage('run the python scripts in db instance') {
            steps {
                sshPublisher(publishers: [sshPublisherDesc(configName: 'demo-rds', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '''source environments/my_env/bin/activate;
python data_generator.py;
python data_processor.py;
python data_analyzer.py;''', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true)])
            }
        }
    }
    triggers {
        // Poll the Git repository for changes every minute
        pollSCM('* * * * *')
    }
}
